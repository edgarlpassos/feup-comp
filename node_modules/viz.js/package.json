{
  "_args": [
    [
      {
        "raw": "viz.js",
        "scope": null,
        "escapedName": "viz.js",
        "name": "viz.js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/epassos/feup/3_ano/comp/feup-comp"
    ]
  ],
  "_from": "viz.js@latest",
  "_id": "viz.js@1.8.0",
  "_inCache": true,
  "_location": "/viz.js",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/viz.js-1.8.0.tgz_1495288357894_0.0632790457457304"
  },
  "_npmUser": {
    "name": "mdaines",
    "email": "mdaines@fastmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "viz.js",
    "scope": null,
    "escapedName": "viz.js",
    "name": "viz.js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/viz.js/-/viz.js-1.8.0.tgz",
  "_shasum": "e0cb5ad241368e35b1a6e960691eba454c24951f",
  "_shrinkwrap": null,
  "_spec": "viz.js",
  "_where": "/home/epassos/feup/3_ano/comp/feup-comp",
  "author": {
    "name": "Mike Daines",
    "email": "mdaines@fastmail.com"
  },
  "browser": {
    "fs": false,
    "path": false,
    "crypto": false
  },
  "bugs": {
    "url": "https://github.com/mdaines/viz.js/issues"
  },
  "dependencies": {},
  "description": "A hack to put Graphviz on the web.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e0cb5ad241368e35b1a6e960691eba454c24951f",
    "tarball": "https://registry.npmjs.org/viz.js/-/viz.js-1.8.0.tgz"
  },
  "files": [
    "viz.js",
    "viz-lite.js"
  ],
  "gitHead": "c524d5b3738b3dc8b6c69b5da6929d05285410a5",
  "homepage": "https://github.com/mdaines/viz.js",
  "keywords": [
    "graphviz",
    "emscripten"
  ],
  "license": "MIT",
  "main": "viz.js",
  "maintainers": [
    {
      "name": "antimatter15",
      "email": "antimatter15@gmail.com"
    },
    {
      "name": "mdaines",
      "email": "mdaines@fastmail.com"
    }
  ],
  "name": "viz.js",
  "optionalDependencies": {},
  "readme": "# Viz.js\n\nThis project is a Makefile for building [Graphviz](http://www.graphviz.org) with [Emscripten](http://kripken.github.io/emscripten-site/) and a simple wrapper for using it in the browser.\n\n## Become a Patron\n\nHelp make Viz.js better by [supporting me on Patreon](https://patreon.com/mdaines). Thank you!\n\n## Getting Viz.js\n\nInstall with Bower:\n\n    bower install viz.js\n\nOr with npm:\n\n    npm install viz.js\n\nOr download the `viz.js` \"binary\" from the [releases page](https://github.com/mdaines/viz.js/releases).\n\n## \"Lite\" Version\n\nA smaller version of Viz.js can be downloaded from the [releases page](https://github.com/mdaines/viz.js/releases) and is available in the Bower package. `viz-lite.js` omits Expat and the NEATO layout plugin.\n\n## API\n\n### Viz(src, options={ format=\"svg\", engine=\"dot\", scale, images=[{ path, width, height }], totalMemory=16777216 })\n\n- `src` is a string representing the graph to render in the [DOT language](http://www.graphviz.org/content/dot-language).\n- `options`\n  - `format` sets the output format, and may be one of `\"svg\"`, `\"xdot\"`, `\"plain\"`, `\"ps\"`, `\"json\"`, or `\"png-image-element\"`.\n  - `engine` sets the Graphviz engine to use, and may be one of `\"circo\"`, `\"dot\"`, `\"neato\"`, `\"osage\"`, or `\"twopi\"`.\n  - `scale` sets the scale factor for the `\"png-image-element\"` format. If this is not specified, `window.devicePixelRatio` will be used if available, and `1` if not.\n  - `images` specifies image dimensions to use when rendering nodes with `image` attributes. This is an array of objects, `{ href, width, height }`. `href` may be a filename (`\"example.png\"`), a relative or absolute path (`\"/images/example.png\"`), or a URL (`\"http://example.com/image.png\"`). Dimensions may be specified with units: in, px, pc, pt, cm, or mm. If no units are given or dimensions are given as numbers, points (pt) are used. Graphviz does not actually load image data when this option is used — images are referenced with the dimensions given, eg, in SVG by an `<image>` element with `width` and `height` attributes.\n  - `totalMemory` sets the total memory available for the Emscripten module instance. This should be a power of 2. The default of 16MB should be sufficient for most cases — only consider using a larger number if you run into the error \"Cannot enlarge memory arrays\".\n\nParses `src` and renders a graph according to the `options` given. Output is a string, except when using the \"png-image-element\" format, when it is an instance of HTMLImageElement.\n\nFor example:\n\n    result = Viz(\"digraph { a -> b; }\");\n    result = Viz(\"digraph { a -> b; }\", { format: \"png-image-element\", scale: 2 });\n    result = Viz(\"graph { n0 -- n1 -- n2 -- n3 -- n0; }\", { engine: \"neato\" });\n    result = Viz(\"digraph { x -> y -> z; }\", { format: \"plain\" });\n    result = Viz(\"digraph { a[image=\\\"test.png\\\"]; }\", { images: [ { path: \"test.png\", width: \"400px\", height: \"300px\" } ] });\n\nIf Graphviz encounters an error, Viz will throw an `Error` object with the error message.\n\n### Viz.svgXmlToPngImageElement(svgXml[, scale[, callback]])\n\n- `svgXml` is an SVG XML string, as may be obtained from the `Viz` function using the `\"svg\"` format option.\n- `scale` sets the scale factor for the output. If this is not specified, `window.devicePixelRatio` will be used if available, and `1` if not.\n- `callback` is an optional Node-style callback. If specified, it is given two arguments, `(err, image)`. If not specified, `Viz.svgXmlToPngImageElement` returns an instance of HTMLImageElement.\n\nConverts `svgXml` to a PNG HTMLImageElement. If `callback` is specfied, `image` is loaded by the time the callback is invoked.\n\n### Viz.svgXmlToPngBase64(svgXml, scale, callback)\n\n- `svgXml` is an SVG XML string, as may be obtained from the `Viz` function using the `\"svg\"` format option.\n- `scale` sets the scale factor for the output. If this is given as `undefined`, `window.devicePixelRatio` will be used if available, and `1` if not.\n- `callback` is a Node-style callback. It is given two arguments, `(err, data)`.\n\nConverts `svgXml` to a PNG represented as a Base64 string. This function requires a callback, unlike `svgXmlToPngImageElement`.\n\n## Supported Graphviz features\n\nThese engines are supported:\n\n- circo\n- dot\n- fdp\n- neato\n- osage\n- twopi\n\nThese formats are supported:\n\n- svg\n- xdot\n- plain\n- ps\n- json\n\n## PNG output\n\nViz.js provides the `\"png-image-element\"` format in addition to the regular Graphviz formats. This returns an `HTMLImageElement` which can be inserted into the document.\n\n    image = Viz(\"digraph g { a -> b; }\", { format: \"png-image-element\" });\n    document.body.appendChild(image);\n\nHowever, this won't work in a Web Worker context. In that case, ask for the `\"svg\"` format in the worker and convert using the accessory function `Viz.svgXmlToPngImageElement` in the window context. See tests/png.js for an example.\n\n### Internet Explorer support\n\nInternet Explorer 10 and 11 require [Fabric.js](http://fabricjs.com) as an optional dependency for PNG output. Viz.js will look for a `fabric` object as a member of the global object with a `loadSVGFromString()` function and use that if present.\n\n## Build\n\nTo build from source, you will need to [install the Emscripten SDK](http://kripken.github.io/emscripten-site/docs/getting_started/index.html).\n\nTo download the sources and build everything:\n\n    make\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mdaines/viz.js.git"
  },
  "scripts": {},
  "version": "1.8.0"
}
